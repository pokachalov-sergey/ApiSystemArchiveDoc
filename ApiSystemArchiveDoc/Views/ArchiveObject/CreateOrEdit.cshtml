@using System.Text
@using ApiSystemArchiveDoc.Models
@using Microsoft.CodeAnalysis.Differencing
@model ApiSystemArchiveDoc.Models.ArchiveObjectCreateOrEditModel

@{
    ViewBag.Title = "Создать";
}
<h2>Создать объект</h2>
<div class="row">
    <label class="control-label col-md-6">Статус: @Model.StatusStr</label>
</div>
@if (!String.IsNullOrEmpty(@Model.CreateUser))
{
    <div class="row">
        <label class="control-label col-md-4">Создал: @Model.CreateUser</label>
        <label class="control-label col-md-4">Дата создания: @Model.CreateDateTime</label>
    </div>
}
@if (!String.IsNullOrEmpty(@Model.EditUser))
{
    <div class="row">
        <label class="control-label col-md-4">Изменил: @Model.EditUser</label>
        <label class="control-label col-md-4">Дата последнего изменения: @Model.EditDateTime</label>
    </div>
}
<hr/>

@using (Html.BeginForm(ViewData["Action"].ToString(), "ArchiveObject"))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group col-md-10 row">
            <div class="col-md-3">
                @Html.HiddenFor(model => model.Id)
            </div>
        </div>
        <div class="form-group col-md-10 row">
            <label class="control-label col-md-2">Вид задания</label>
            <div class="col-md-3">
                @if (string.IsNullOrEmpty(Model.ObjectTaskType))
                {
                    @Html.DropDownListFor(model => model.ObjectTaskType, selectList: Model.TaskTypes, htmlAttributes: new { @class = "form-control" }, optionLabel: "Выберите тип задания")
                }
                else
                {
                    @if (Model.StatusCodeStr == "30")
                    @Html.DropDownListFor(model => model.ObjectTaskType, selectList: Model.TaskTypes, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                    else
                    @Html.DropDownListFor(model => model.ObjectTaskType, selectList: Model.TaskTypes, htmlAttributes: new { @class = "form-control" })
                }
                @Html.ValidationMessageFor(model => model.ObjectTaskType, "", new { @class = "text-danger" })
            </div>

            <label class="control-label col-md-2">Тип объекта</label>
            <div class="col-md-3">
                @if (string.IsNullOrEmpty(Model.ObjectType))
                {
                    @Html.DropDownListFor(model => model.ObjectType, selectList: Model.ObjectTypes, htmlAttributes: new { @class = "form-control" }, optionLabel: "Выберите тип объекта")
                }
                else
                {
                    @if (Model.StatusCodeStr == "30")
                    @Html.DropDownListFor(model => model.ObjectType, selectList: Model.ObjectTypes, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                    else
                    @Html.DropDownListFor(model => model.ObjectType, selectList: Model.ObjectTypes, htmlAttributes: new { @class = "form-control" })
                }
                @Html.ValidationMessageFor(model => model.ObjectType, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-10 row">

            <label class="control-label col-md-2">Плошадь</label>
            <div class="col-md-3">
                @if (Model.StatusCodeStr == "30")
                {
                    @Html.EditorFor(model => model.Square, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                }
                else
                {
                    @Html.EditorFor(model => model.Square, new { htmlAttributes = new { @class = "form-control" } })
                }
                @Html.ValidationMessageFor(model => model.Square, "", new { @class = "text-danger" })

            </div>
            <label class="control-label col-md-2">Кадастровый квартал</label>
            <div class="col-md-3">
                @if (Model.StatusCodeStr == "30")
                {
                    @Html.EditorFor(model => model.KadKvartal, new { htmlAttributes = new { id = "kadKv",
                        @class = "form-control", disabled = "disable" } })
                }
                
                else {
                    @Html.EditorFor(model => model.KadKvartal, new { htmlAttributes = new {  id = "kadKv",@class = "form-control" } })
                }
                
                @Html.ValidationMessageFor(model => model.KadKvartal, "", new {  @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-10 row">
            <label class="control-label col-md-2">Регион:</label>
            <div class="col-md-8">
                @Html.EditorFor(model => model.Region, new
                {
                    htmlAttributes = new
                    {
                        @class = "form-control disable", disabled = "disabled"
                    }
                })
            </div>
        </div>
        <div class="form-group col-md-10 row">

            <label class="control-label col-md-2">Район в регионе:</label>
            <div class="col-md-8">

                @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group col-md-10 row">

            <label class="control-label col-md-2">Город/г.о.:</label>
            <div class="col-md-8">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group col-md-10 row">

            <label class="control-label col-md-2">Н.п.:</label>
            <div class="col-md-8">
                @Html.EditorFor(model => model.Settlement, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group col-md-10 row">

            <label class="control-label col-md-2">Район:</label>
            <div class="col-md-8">
                @Html.EditorFor(model => model.CityDistrict, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        <div class="form-group col-md-10 row">

            <label class="control-label col-md-2">Улица:</label>
            <div class="col-md-8">
                @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-md-10 row">

            <label class="control-label col-md-2">Номер з.у.:</label>
            <div class="col-md-3">
                @Html.EditorFor(model => model.Stead,
                    new
                    {
                        htmlAttributes = new { @class = "form-control", autocomplete = "off", type = "number" }
                    })
            </div>


            <label class="control-label col-md-2">Номер дома:</label>
            <div class="col-md-3">
                @Html.EditorFor(model => model.House, new
                {
                    htmlAttributes = new { @class = "form-control", autocomplete = "off", type = "number" }
                })
            </div>
        </div>
        <div class="form-group col-md-10 row">

            <label class="control-label col-md-1">Корпус:</label>
            <div class="col-md-2">
                @Html.EditorFor(model => model.Block, new
                {
                    htmlAttributes = new { @class = "form-control" }
                })
            </div>
            @* </div> *@
            @* <div class="form-group col-md-10 row"> *@

            <label class="control-label col-md-1">Этаж:</label>
            <div class="col-md-2">
                @Html.EditorFor(model => model.Floor, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            @* </div> *@
            @* <div class="form-group col-md-10 row"> *@

            <label class="control-label col-md-2">Номер помещения:</label>
            <div class="col-md-2">
                @Html.EditorFor(model => model.Flat, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group col-md-10 row">
            <label class="control-label col-md-2">ОКАТО:</label>
            <div class="col-md-3">
                @Html.EditorFor(model => model.Okato, new
                {
                    htmlAttributes = new { @class = "form-control", autocomplete = "on", type = "number" }
                })
            </div>
            <label class="control-label col-md-2">ОКТМО:</label>
            <div class="col-md-3">
                @Html.EditorFor(model => model.Oktmo, new
                {
                    htmlAttributes = new { @class = "form-control", autocomplete = "on", type = "number" }
                })
            </div>
        </div>
        <hr>
        <p></p>
        @if (Model.StatusCodeStr == "25")
        {
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#file-modal">
                Прикрепить файлы
            </button>
        }
        <hr/>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-8">
                <div class="btn-group" role="group" aria-label="...">

                    @if (Model.StatusCodeStr == "01" || Model.StatusCodeStr == "10")
                    {
                        <input type="submit" value="Сохранить" class="btn btn-outline-danger"/>
                    }
                    @if (Model.StatusCodeStr == "20")
                    {
                        <input type="submit" value="Сохранить изменения" class="btn btn-outline-danger"/>
                        <input id  = check value="Проверить на дубли" class="btn btn-outline-danger" data-toggle="modal" 
                               data-target="#check-modal"/>
                    }
                    @if (Model.StatusCodeStr == "25")
                    {
                        <input type="submit" value="Сохранить изменения" class="btn btn-outline-danger"/>
                    }
                    @if (Model.StatusCodeStr == "30")
                    {
                        <input type="submit" value="Завершить внесение" class="btn btn-outline-danger"/>
                    }
                    <button class="back  btn btn-outline-success" type="reset" href="#">Отмена</button>
                </div>
            </div>
        </div>
    </div>
}


<div class="modal fade" id="file-modal" tabindex="-1" role="dialog" aria-labelledby="file-modal-label"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="file-modal-label">Загрузить файл</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="uploadFile" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label for="file-input">Выберите файл</label>
                        <input type="file" class="form-control-file" id="file-input" name="file">
                    </div>
                    <div class="form-group">
                        <label for="file-type">Тип файла</label>
                        @Html.DropDownList("doctypeId", Model.DocumentTypes,
                            htmlAttributes: new { @class = "form-control", @id = "file-type" }, optionLabel: "Выберите тип документа")
                        @* </select> *@
                    </div>
                    <div class="form-group">
                        <label for="file-category">Категория</label>
                        <input type="text" class="form-control" id="file-category" name="fileCategory">
                    </div>
                    <div class="form-group">
                        <input type="hidden" class="form-control-file" id="storeObject-Id" name="storeObjectId">
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Загрузить</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="check-modal" tabindex="-1" role="dialog" aria-labelledby="file-modal-label"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="file-modal-label">Загрузить файл</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="uploadFile" enctype="multipart/form-data">
                  
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Дубли не обнаружены</button>
                        <button type="submit" class="btn btn-primary">Дубли обнаружены остановить процесс внесения</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<script>

    $(document).ready(function () {
        // Обработчик события открытия модального окна
        $("#check-modal").on('show.bs.modal', function (event) {
            // Отправляем запрос на получение данных модального окна
            $.ajax({
                url: '/ArchiveObject/GetSimilarObject',
                type: 'GET',
                data: { Id: "@Model.Id.ToString()" },
                success: function (data) {
                    // Обновляем содержимое модального окна
                    //$("#check-modal" ).html(data);
                    alert(data)
                }
            });
        });
    });



    document.getElementById("storeObject-Id").value = @Model.Id;
    
    var kkv = new Inputmask("99:99:9999999");
    kkv.mask(document.getElementById("kadKv"));
    var okato = new Inputmask("21999999[999]");
    okato.mask(document.getElementById("Okato"));
    var oktmo = new Inputmask("21999999[999]");
    oktmo.mask(document.getElementById("Oktmo"));
    
    $('.back').click(function () {
        window.history.back();
    });
    $(function () {
      
        
        $('#uploadFile').on('submit', function (e) {
            e.preventDefault();
            var formData = new FormData();
            formData.append("file", $('#file-input')[0].files[0]);
            formData.append("fileType", $('#file-type')[0].value);
            formData.append("fileCategory", $('#file-category')[0].value);
            formData.append("storeObjectId", @Model.Id);
            $.ajax({
                type: 'post',
                url: '/File/UploadFile',
                data: formData,
                enctype: 'multipart/form-data',
                processData: false,
                contentType: false,
                success: function (response) {

                    alert(response);
                }

            });
            e.preventDefault();
        });
    });
    document.getElementById("storeObject-Id").value = @Model.Id;

</script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>