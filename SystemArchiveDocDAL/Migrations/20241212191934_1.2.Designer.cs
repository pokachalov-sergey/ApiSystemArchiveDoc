// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SystemArchiveDocDAL;

#nullable disable

namespace SystemArchiveDocDAL.Migrations
{
    [DbContext(typeof(SadDbContext))]
    [Migration("20241212191934_1.2")]
    partial class _12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("AreaFiasId")
                        .HasColumnType("text");

                    b.Property<string>("AreaKladrId")
                        .HasColumnType("text");

                    b.Property<string>("AreaType")
                        .HasColumnType("text");

                    b.Property<string>("AreaTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("AreaWithType")
                        .HasColumnType("text");

                    b.Property<string>("BeltwayDistance")
                        .HasColumnType("text");

                    b.Property<string>("BeltwayHit")
                        .HasColumnType("text");

                    b.Property<string>("Block")
                        .HasColumnType("text");

                    b.Property<string>("BlockType")
                        .HasColumnType("text");

                    b.Property<string>("BlockTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("CapitalMarker")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CityArea")
                        .HasColumnType("text");

                    b.Property<string>("CityDistrict")
                        .HasColumnType("text");

                    b.Property<string>("CityDistrictFiasId")
                        .HasColumnType("text");

                    b.Property<string>("CityDistrictKladrId")
                        .HasColumnType("text");

                    b.Property<string>("CityDistrictType")
                        .HasColumnType("text");

                    b.Property<string>("CityDistrictTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("CityDistrictWithType")
                        .HasColumnType("text");

                    b.Property<string>("CityFiasId")
                        .HasColumnType("text");

                    b.Property<string>("CityKladrId")
                        .HasColumnType("text");

                    b.Property<string>("CityTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("CityWithType")
                        .HasColumnType("text");

                    b.Property<string>("CitygType")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("text");

                    b.Property<string>("Entrance")
                        .HasColumnType("text");

                    b.Property<string>("FederalDistrict")
                        .HasColumnType("text");

                    b.Property<string>("FiasActuality_state")
                        .HasColumnType("text");

                    b.Property<string>("FiasCode")
                        .HasColumnType("text");

                    b.Property<string>("FiasId")
                        .HasColumnType("text");

                    b.Property<string>("FiasLevel")
                        .HasColumnType("text");

                    b.Property<string>("Flat")
                        .HasColumnType("text");

                    b.Property<string>("FlatArea")
                        .HasColumnType("text");

                    b.Property<string>("FlatCadnum")
                        .HasColumnType("text");

                    b.Property<string>("FlatFiasId")
                        .HasColumnType("text");

                    b.Property<string>("FlatPrice")
                        .HasColumnType("text");

                    b.Property<string>("FlatType")
                        .HasColumnType("text");

                    b.Property<string>("FlatTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<string>("Gc")
                        .HasColumnType("text");

                    b.Property<string>("GcComplete")
                        .HasColumnType("text");

                    b.Property<string>("GcHouse")
                        .HasColumnType("text");

                    b.Property<string>("Gc_geo")
                        .HasColumnType("text");

                    b.Property<string>("GeoLat")
                        .HasColumnType("text");

                    b.Property<string>("GeoLon")
                        .HasColumnType("text");

                    b.Property<string>("GeonameId")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("HistoryValues")
                        .HasColumnType("text[]");

                    b.Property<string>("House")
                        .HasColumnType("text");

                    b.Property<string>("HouseCadnum")
                        .HasColumnType("text");

                    b.Property<string>("HouseFiasId")
                        .HasColumnType("text");

                    b.Property<string>("HouseKladrId")
                        .HasColumnType("text");

                    b.Property<string>("HouseType")
                        .HasColumnType("text");

                    b.Property<string>("HouseTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("HouseWithType")
                        .HasColumnType("text");

                    b.Property<string>("KladrId")
                        .HasColumnType("text");

                    b.Property<string>("Okato")
                        .HasColumnType("text");

                    b.Property<string>("Oktmo")
                        .HasColumnType("text");

                    b.Property<string>("PostalBox")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("RegionFiasId")
                        .HasColumnType("text");

                    b.Property<string>("RegionIsoCode")
                        .HasColumnType("text");

                    b.Property<string>("RegionKadrId")
                        .HasColumnType("text");

                    b.Property<string>("RegionType")
                        .HasColumnType("text");

                    b.Property<string>("RegionTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("RegionWitType")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<string>("Settlement")
                        .HasColumnType("text");

                    b.Property<string>("SettlementFiasId")
                        .HasColumnType("text");

                    b.Property<string>("SettlementKladrId")
                        .HasColumnType("text");

                    b.Property<string>("SettlementType")
                        .HasColumnType("text");

                    b.Property<string>("SettlementTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("SquareMeterPrice")
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Stead")
                        .HasColumnType("text");

                    b.Property<string>("SteadFiasId")
                        .HasColumnType("text");

                    b.Property<string>("SteadKladrId")
                        .HasColumnType("text");

                    b.Property<string>("SteadType")
                        .HasColumnType("text");

                    b.Property<string>("SteadTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetFiasId")
                        .HasColumnType("text");

                    b.Property<string>("StreetKladrId")
                        .HasColumnType("text");

                    b.Property<string>("StreetType")
                        .HasColumnType("text");

                    b.Property<string>("StreetTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("StreetWithType")
                        .HasColumnType("text");

                    b.Property<string>("SubArea")
                        .HasColumnType("text");

                    b.Property<string>("SubAreaFiasId")
                        .HasColumnType("text");

                    b.Property<string>("SubAreaKladrId")
                        .HasColumnType("text");

                    b.Property<string>("SubAreaType")
                        .HasColumnType("text");

                    b.Property<string>("SubAreaTypeFull")
                        .HasColumnType("text");

                    b.Property<string>("SubAreaWithType")
                        .HasColumnType("text");

                    b.Property<string>("TaxOffice")
                        .HasColumnType("text");

                    b.Property<string>("TaxOfficeLegal")
                        .HasColumnType("text");

                    b.Property<string>("Timezone")
                        .HasColumnType("text");

                    b.Property<string>("UnparsedParts")
                        .HasColumnType("text");

                    b.Property<string>("settlementWithType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArchiveObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Extention")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveObjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveDocumentEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("DocumentEvents");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveDocumentOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentOperations");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveDocumentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentStatusEnumerable");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveDocumentTaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentTaskTypes");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveDocumentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ObjectTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ObjectTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("SystemArchiveObject");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveObjectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ObjectTypes");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveAddress", b =>
                {
                    b.HasOne("SystemArchiveDocDomain.SystemArchiveDocumentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveDocument", b =>
                {
                    b.HasOne("SystemArchiveDocDomain.SystemArchiveObject", "ArchiveObject")
                        .WithMany("Documents")
                        .HasForeignKey("ArchiveObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemArchiveDocDomain.SystemArchiveDocumentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemArchiveDocDomain.SystemArchiveDocumentTaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemArchiveDocDomain.SystemArchiveDocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchiveObject");

                    b.Navigation("Status");

                    b.Navigation("TaskType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveDocumentEvent", b =>
                {
                    b.HasOne("SystemArchiveDocDomain.SystemArchiveDocumentOperation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveObject", b =>
                {
                    b.HasOne("SystemArchiveDocDomain.SystemArchiveAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemArchiveDocDomain.SystemArchiveObjectType", "ObjectType")
                        .WithMany()
                        .HasForeignKey("ObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SystemArchiveDocDomain.SystemArchiveDocumentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("ObjectType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SystemArchiveDocDomain.SystemArchiveObject", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
